summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
# plot evenness ~ AI
pdat <- dat
pdat$fit <- predict(bestmod, level = 0, newdata = pdat)
AI <- (intervals(bestmod)$fixed["AI", "upper"] - intervals(bestmod)$fixed["AI", "est."])
pdat$upAI <- sqrt(pdat$fit + AI)
pdat$lwAI <- sqrt(pdat$fit - AI)
pdat$fit <- sqrt(pdat$fit)
p0 <- lm(fit ~ AI, data = pdat)
p0u <- lm(upAI ~ AI, data = pdat)
pdat$upAI <- predict(p0u, level = 0, newdata = pdat)
p0l <- lm(lwAI ~ AI, data = pdat)
pdat$lwAI <- predict(p0l, level = 0, newdata = pdat)
s <- ggplot() +
geom_point(data = dat,
aes(x = AI, y = evenness),
colour = "grey48",
size = 2,
alpha = 0.2) +
geom_ribbon(data = pdat,
aes(x = AI, ymin = pdat$lwAI, ymax = pdat$upAI),
alpha = 0.15,
linetype = 2,
colour = NA,
size = 0.1,
fill = "chocolate4") +
geom_line(data = fortify(p0), aes(x = AI, y = .fitted),
colour = "chocolate4",
size = 1) +
scale_color_manual(values = c("grey38", "firebrick 3"),
labels= c("Ambient P","P fertilized"),
name="P level") +
labs(y = expression(Species ~ evenness), x = "Aridity index")
s + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# plot evenness ~ ndep
pdat <- dat
pdat$fit <- predict(bestmod, level = 0, newdata = pdat)
N_Dep <- (intervals(bestmod)$fixed["N_Dep", "upper"] - intervals(bestmod)$fixed["N_Dep", "est."])
pdat$upN_Dep <- sqrt(pdat$fit + N_Dep)
pdat$lwN_Dep <- sqrt(pdat$fit - N_Dep)
pdat$fit <- sqrt(pdat$fit)
p0 <- lm(fit ~ N_Dep, data = pdat)
p0u <- lm(upN_Dep ~ N_Dep, data = pdat)
pdat$upN_Dep <- predict(p0u, level = 0, newdata = pdat)
p0l <- lm(lwN_Dep ~ N_Dep, data = pdat)
pdat$lwN_Dep <- predict(p0l, level = 0, newdata = pdat)
s <- ggplot() +
geom_point(data = dat,
aes(x = N_Dep, y = evenness),
colour = "grey48",
size = 2,
alpha = 0.2) +
geom_ribbon(data = pdat,
aes(x = N_Dep, ymin = pdat$lwN_Dep, ymax = pdat$upN_Dep),
alpha = 0.15,
linetype = 2,
colour = NA,
size = 0.1,
fill = "royalblue4") +
geom_line(data = fortify(p0), aes(x = N_Dep, y = .fitted),
colour = "royalblue4",
size = 1) +
labs(y = expression(Species ~ evenness), x = expression(Nitrogen ~ deposition ~ kg ~ ha^{-1}))
s + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# plot evenness ~ p
colorder <- c( "grey48", "firebrick 3")
dat$P <- as.factor(dat$P)
b <- ggplot(dat, aes(factor(P), evenness, fill = P)) +
geom_boxplot(color = "black") +
scale_color_manual(values = c( "grey48", "firebrick 3"),
labels = c("Ambient P","P fertilized"),
name ="P level") +
scale_fill_manual(values = c( "grey48", "firebrick 3"),
labels = c("Ambient P","P fertilized"),
name ="P level") +
labs(y = expression(Species ~ evenness),
x = "P level") +
scale_x_discrete(labels = c("Ambient P","P fertilized"))
b + theme_few() + theme(legend.position = c(0.9, 0.15),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# plot evenness ~ n:ndep
pdat <- dat
pdat$fit <- predict(bestmod, level = 0, newdata = pdat)
N_Dep <- (intervals(bestmod)$fixed["N_Dep", "upper"] - intervals(bestmod)$fixed["N_Dep", "est."])
N_Dep_N <- N_Dep + (intervals(bestmod)$fixed["N_Dep:N", "upper"] - intervals(bestmod)$fixed["N_Dep:N", "est."])
pdat$upN_Dep <- sqrt(pdat$fit + N_Dep)
pdat$lwN_Dep <- sqrt(pdat$fit - N_Dep)
pdat$upN_Dep_N <- sqrt(pdat$fit + N_Dep_N)
pdat$lwN_Dep_N <- sqrt(pdat$fit - N_Dep_N)
pdat$fit <- sqrt(pdat$fit)
p0 <- lm(fit ~ N_Dep, data = pdat[which(pdat$N == 0), ])
p0u <- lm(upN_Dep ~ N_Dep, data = pdat[which(pdat$N == 0), ])
pdat$upN_Dep <- predict(p0u, level = 0, newdata = pdat)
p0l <- lm(lwN_Dep ~ N_Dep, data = pdat[which(pdat$N == 0), ])
pdat$lwN_Dep <- predict(p0l, level = 0, newdata = pdat)
p1 <- lm(fit ~ N_Dep, data = pdat[which(pdat$N == 1), ])
p1u <- lm(upN_Dep_N ~ N_Dep, data = pdat[which(pdat$N == 1), ])
pdat$upN_Dep_N <- predict(p1u, level = 0, newdata = pdat)
p1l <- lm(lwN_Dep_N ~ N_Dep, data = pdat[which(pdat$N == 1), ])
pdat$lwN_Dep_N <- predict(p1l, level = 0, newdata = pdat)
s <- ggplot() +
geom_point(data = dat,
aes(x = N_Dep, y = evenness, colour = factor(N)),
size = 2,
alpha = 0.3) +
geom_ribbon(data = pdat,
aes(x = N_Dep, ymin = pdat$lwN_Dep_N, ymax = pdat$upN_Dep_N),
alpha = 0.15,
linetype = 2,
colour = NA,
size = 0.1,
fill = "royalblue3") +
geom_ribbon(data = pdat,
aes(x = N_Dep, ymin = pdat$lwN_Dep, ymax = pdat$upN_Dep),
alpha = 0.15,
linetype = 2,
colour = NA,
size = 0.1,
fill = "grey45") +
geom_line(data = fortify(p0), aes(x = N_Dep, y = .fitted),
colour = "grey38",
size = 1) +
geom_line(data = fortify(p1), aes(x = N_Dep, y = .fitted),
colour = "royalblue3",
size = 1) +
scale_color_manual(values = c("grey38", "royalblue3"),
labels= c("Ambient N","N fertilized"),
name="N level") +
labs(y = expression(Species ~ evenness),
x = expression(Nitrogen ~ deposition ~ kg ~ ha^{-1}))
s + theme_few() + theme(legend.position = c(0.9, 0.15),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# load data and initialize data frame
spec <- read.csv("stcovercommatrix.csv", header = TRUE, row.names = 1)
sites <- c("Bunchgrass", "Cedar Creek", "Cedar Point", "Konza",
"Lookout", "Sevilleta", "Shortgrass", "Temple", "Trelease")
scoressep <- data.frame(
"nmds1" = as.numeric(),
"nmds2" = as.numeric(),
"stress" = as.numeric()
)
scorestog <- data.frame(
"nmds1" = as.numeric(),
"nmds2" = as.numeric(),
"stress" = as.numeric()
)
# create nmds and permanova models testing treatments for each site individually
for (i in 1:length(sites)) {
subspec <- spec[grep(paste("^", sites[i], sep = ""), row.names(spec)), ]
bray.subspec = vegdist(subspec, method = "bray")
nmds.subspec <- metaMDS(bray.subspec)
s <- cbind(as.data.frame(scores(nmds.subspec)), nmds.subspec$stress)
scoressep <- rbind(scoressep, s)
sitedat <- alldata[grep(paste("^", sites[i], sep = ""), alldata$site_name), ]
permod <- adonis(bray.subspec ~
N +
P +
N * P,
data = sitedat, permutations = 999,
strata = sitedat$uniqblk)
permod
mfilnam <- paste(outpath, sites[i], "_spp_permodtable.csv", sep = "")
write.csv(permod$aov.tab, mfilnam)
}
colnames(scoressep) <- c("ssnmds1", "ssnmds2", "ssstress")
scoressep$uniqsubplot <- rownames(scoressep)
# create an nmds and permanova model to test treatments across all sites
subspec <- spec
bray.subspec = vegdist(subspec, method = "bray")
nmds.subspec <- metaMDS(bray.subspec)
s <- cbind(as.data.frame(scores(nmds.subspec)), nmds.subspec$stress)
scorestog <- rbind(scorestog, s)
sitedat <- alldata
sitedat$trt <- as.factor(sitedat$trt)
permod <- adonis(bray.subspec ~
N +
P +
N * P,
data = sitedat, permutations = 999,
strata = sitedat$site_name)
permod
mfilnam <- paste(outpath, "allsites", "_spp_permodtable.csv", sep = "")
write.csv(permod$aov.tab, mfilnam)
colnames(scorestog) <- c("stnmds1", "stnmds2", "ststress")
scorestog$uniqsubplot <- rownames(scorestog)
# merge nmds scores with data
alldata <- merge(alldata, scorestog, by = "uniqsubplot")
alldata <- merge(alldata, scoressep, by = "uniqsubplot")
# load data and initialize data frame
spec <- read.csv("traitcommatrix.csv", header = TRUE, row.names = 1)
sites <- c("Bunchgrass", "Cedar Creek", "Cedar Point", "Konza",
"Sevilleta", "Shortgrass", "Temple", "Trelease", "Lookout")
tscoressep <- data.frame(
"nmds1" = as.numeric(),
"nmds2" = as.numeric(),
"stress" = as.numeric()
)
tscorestog <- data.frame(
"nmds1" = as.numeric(),
"nmds2" = as.numeric(),
"stress" = as.numeric()
)
# create nmds and permanova models testing treatments for each site individually
for (i in 1:length(sites)) {
subspec <- spec[grep(paste("^", sites[i], sep = ""), row.names(spec)), ]
bray.subspec = vegdist(subspec, method = "bray")
nmds.subspec <- metaMDS(bray.subspec)
s <- cbind(as.data.frame(scores(nmds.subspec)), nmds.subspec$stress)
tscoressep <- rbind(tscoressep, s)
sitedat <- alldata[grep(paste("^", sites[i], sep = ""), alldata$site_name), ]
permod <- adonis(bray.subspec ~
N +
P +
N * P,
data = sitedat, permutations = 999,
strata = sitedat$uniqblk)
permod
mfilnam <- paste(outpath, sites[i], "_trait_permodtable.csv", sep = "")
write.csv(permod$aov.tab, mfilnam)
}
colnames(tscoressep) <- c("tsnmds1", "tsnmds2", "tsstress")
tscoressep$uniqsubplot <- rownames(tscoressep)
# create an nmds and permanova model to test treatments across all sites
subspec <- spec
bray.subspec = vegdist(subspec, method = "bray")
nmds.subspec <- metaMDS(bray.subspec)
s <- cbind(as.data.frame(scores(nmds.subspec)), nmds.subspec$stress)
tscorestog <- rbind(tscorestog, s)
sitedat <- alldata
sitedat$trt <- as.factor(sitedat$trt)
permod <- adonis(bray.subspec ~
N +
P +
N * P,
data = sitedat, permutations = 999,
strata = sitedat$site_name)
permod
mfilnam <- paste(outpath, "allsites", "_trait_permodtable.csv", sep = "")
write.csv(permod$aov.tab, mfilnam)
colnames(tscorestog) <- c("ttnmds1", "ttnmds2", "ttstress")
tscorestog$uniqsubplot <- rownames(tscorestog)
# merge nmds scores with data
alldata <- merge(alldata, tscorestog, by = "uniqsubplot")
alldata <- merge(alldata, tscoressep, by = "uniqsubplot")
# plot trait differences in analyzed sites together
np1 <- alldata
NMDS = data.frame(NMDS1 = np1$ttnmds1, NMDS2 = np1$ttnmds2, group = np1$N, site = np1$site_name)
for(i in 1:length(NMDS[, 1])){
if(NMDS$group[i] == 1) {
NMDS$group[i] <- "N"
} else {
NMDS$group[i] <- "C"
}
}
NMDS$group <- as.factor(NMDS$group)
df.trt <- data.frame()
for (g in levels(NMDS$group)){
df.trt <- rbind(df.trt,
cbind(as.data.frame(with(NMDS[NMDS$group == g, ],
veganCovEllipse(cov.wt(cbind(NMDS1, NMDS2), wt = rep(1 / length(NMDS1),
length(NMDS1)))$cov, center = c(mean(NMDS1), mean(NMDS2))))), group = g))
}
ell.c <- subset(df.trt, group == "C")
ell.n <- subset(df.trt, group == "N")
limx <- c(-0.2, 0.2)
limy <- c(-0.2, 0.2)
par(pin=c(2.5,2.5))
{
plot(ttnmds2 ~ ttnmds1, data = subset(np1, np1$trt == c("Control", "P")),
pch = 21, col = alpha('grey48', 0.5), bg = alpha('grey48', 0.5),
ylim = limy, xlim = limx, ylab = "NMDS 2", xlab = "NMDS 1")
points(ttnmds2 ~ ttnmds1, data = subset(np1, np1$trt == c("N", "NP")),
pch = 22, col = alpha('royalblue4', 0.5), bg = alpha('royalblue4', 0.5),
ylim = limy, xlim = limx, ylab = "", xlab = "")
polygon(ell.c$NMDS1, ell.c$NMDS2, lty=2, lwd = 2, border = 'grey48', col = alpha('grey48', 0.2),
ylim = limy, xlim = limx, ylab = "", xlab = "")
polygon(ell.n$NMDS1, ell.n$NMDS2, lty=2, lwd = 2, border = 'royalblue4', col = alpha('royalblue4', 0.2),
ylim = limy, xlim = limx, ylab = "", xlab = "")
legend("bottomright", c('Contol', 'N fertilized'),
lty = 2, lwd = 1, col = c("grey48", 'royalblue4'),
pch = c(21, 22), pt.bg = alpha(c("grey48", 'royalblue4'), 0.3),
box.lwd = 1, bg = NA, pt.cex = 1, cex = 0.75)
mtext('Plant Trait Composition', line=1, cex=1.2)
}
# plot ttnmds ~ N
colorder <- c( "grey48", "royalblue3")
dat <- alldata
dat$N <- as.factor(dat$N)
b <- ggplot(dat, aes(factor(N), ttnmds1, fill = N)) +
geom_boxplot(color = "black") +
scale_color_manual(values = c( "grey48", "royalblue3"),
labels = c("Ambient N","N fertilized"),
name ="N level") +
scale_fill_manual(values = c( "grey48", "royalblue4"),
labels = c("Ambient N","N fertilized"),
name ="N level") +
labs(y = expression(NMDS ~ 1),
x = "N level") +
scale_x_discrete(labels = c("Ambient N","N fertilized"))
b + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
library(dplyr)
NMDS %>%
group_by(group, site) %>%
summarise_at(vars("NMDS1", "NMDS2"), mean) -> snmds
snmds %>%
group_by(group) %>%
summarise_at(vars("NMDS1"), mean) -> mnmds
mnmds
setwd("~/Desktop/ffranking/final_data")
d <- read.csv("defense.csv", header = TRUE)
k <- read.csv("kick.csv", header = TRUE)
q <- read.csv("qb.csv", header = TRUE)
r <- read.csv("rb.csv", header = TRUE)
t <- read.csv("te.csv", header = TRUE)
w <- read.csv("wr.csv", header = TRUE)
View(d)
d[ , order(names(d))]
# Are fantasy football rankings accurate?
# Chris Walter - chriswalter.info
#
# Data sources - 2019 fantasy football stats: Fantasy pros weekly stats database (Yahoo ownership scoring)
#                accessed on 11-AUG-2020 at https://www.fantasypros.com/nfl/stats/qb.php?ownership=y&range=full
#
#                2019 fantasy football rankings: Fantasy pros weekly Expert Consensus Rankings, scraped from weekly
#                rankings webpages, e.g. https://www.fantasypros.com/2019/09/mike-taglieres-week-1-fantasy-football-rankings-2019/
library(stringer)
# Are fantasy football rankings accurate?
# Chris Walter - chriswalter.info
#
# Data sources - 2019 fantasy football stats: Fantasy pros weekly stats database (Yahoo ownership scoring)
#                accessed on 11-AUG-2020 at https://www.fantasypros.com/nfl/stats/qb.php?ownership=y&range=full
#
#                2019 fantasy football rankings: Fantasy pros weekly Expert Consensus Rankings, scraped from weekly
#                rankings webpages, e.g. https://www.fantasypros.com/2019/09/mike-taglieres-week-1-fantasy-football-rankings-2019/
library(stringrr)
# Are fantasy football rankings accurate?
# Chris Walter - chriswalter.info
#
# Data sources - 2019 fantasy football stats: Fantasy pros weekly stats database (Yahoo ownership scoring)
#                accessed on 11-AUG-2020 at https://www.fantasypros.com/nfl/stats/qb.php?ownership=y&range=full
#
#                2019 fantasy football rankings: Fantasy pros weekly Expert Consensus Rankings, scraped from weekly
#                rankings webpages, e.g. https://www.fantasypros.com/2019/09/mike-taglieres-week-1-fantasy-football-rankings-2019/
library(stringr)
names(d)[1]
names(d)[2]
str_sub(names(d)[2], 3, 3)
str_sub(names(d)[2], 1, 1)
d <- read.csv("defense.csv", header = TRUE)
d <- d[ , order(names(d))]
View(d)
d <- read.csv("defense.csv", header = TRUE)
View(d)
d <- d[ , order(names(d))]
View(d)
da <- data.frame(d[35], stack(d[1:17]))
View(da)
da <- data.frame(d[35], stack(d[1:17]), stack(d[18:34]))
View(da)
d <- read.csv("defense.csv", header = TRUE)
d <- d[ , order(names(d))]
d <- data.frame(d[35], stack(d[1:17]), stack(d[18:34]))
library(stringr)
d <- read.csv("defense.csv", header = TRUE)
d <- d[ , order(names(d))]
d <- data.frame(d[35], stack(d[1:17]), stack(d[18:34]))
k <- read.csv("kick.csv", header = TRUE)
k <- k[ , order(names(k))]
k <- data.frame(k[35], stack(k[1:17]), stack(k[18:34]))
q <- read.csv("qb.csv", header = TRUE)
q <- q[ , order(names(q))]
q <- data.frame(q[35], stack(q[1:17]), stack(q[18:34]))
r <- read.csv("rb.csv", header = TRUE)
r <- r[ , order(names(r))]
r <- data.frame(r[35], stack(r[1:17]), stack(r[18:34]))
t <- read.csv("te.csv", header = TRUE)
t <- t[ , order(names(t))]
t <- data.frame(t[35], stack(t[1:17]), stack(t[18:34]))
w <- read.csv("wr.csv", header = TRUE)
w <- w[ , order(names(w))]
w <- data.frame(w[35], stack(w[1:17]), stack(w[18:34]))
View(k)
View(d)
k <- read.csv("kick.csv", header = TRUE)
k <- k[ , order(names(k))]
View(k)
k <- k[ , order(names(k))]
k <- data.frame(k[31], stack(k[1:15]), stack(k[16:30]))
k <- read.csv("kick.csv", header = TRUE)
k <- k[ , order(names(k))]
k <- data.frame(k[31], stack(k[1:15]), stack(k[16:30]))
View(k)
q <- read.csv("qb.csv", header = TRUE)
q <- q[ , order(names(q))]
q <- data.frame(q[35], stack(q[1:17]), stack(q[18:34]))
View(q)
r <- read.csv("rb.csv", header = TRUE)
r <- r[ , order(names(r))]
r <- data.frame(r[35], stack(r[1:17]), stack(r[18:34]))
View(r)
t <- read.csv("te.csv", header = TRUE)
t <- t[ , order(names(t))]
t <- data.frame(t[35], stack(t[1:17]), stack(t[18:34]))
View(t)
w <- read.csv("wr.csv", header = TRUE)
w <- w[ , order(names(w))]
w <- data.frame(w[35], stack(w[1:17]), stack(w[18:34]))
View(t)
View(w)
complete.cases(d)
data[complete.cases(d), ]
complete.cases(d)
d[complete.cases(d), ]
setwd("~/Desktop/ffranking/final_data")
write.csv(d, "d.csv", row.names = FALSE)
write.csv(k, "k.csv", row.names = FALSE)
write.csv(q, "q.csv", row.names = FALSE)
write.csv(r, "r.csv", row.names = FALSE)
write.csv(t, "t.csv", row.names = FALSE)
write.csv(w, "w.csv", row.names = FALSE)
View(k)
d <- read.csv("defense.csv", header = TRUE)
setwd("~/Desktop/ffranking/scraped_data/cleaned_data")
d <- read.csv("defense.csv", header = TRUE)
d <- read.csv("defense.csv", header = TRUE)
d <- d[ , order(names(d))]
View(d)
d <- data.frame(d[35], stack(d[1:17]), stack(d[18:34]), stack(d[36:54]))
d <- data.frame(d[35], stack(d[1:17]), stack(d[18:34]), stack(d[36:52]))
View(d)
View(d)
colnames(d) <- c("player", "ecr", "ecrwk", "fpts", "fptswk", "rank", "rankwk")
View(d)
d <- d[complete.cases(d), ]
d <- read.csv("defense.csv", header = TRUE)
d <- d[ , order(names(d))]
d <- data.frame(d[35], stack(d[1:17]), stack(d[18:34]), stack(d[36:52]))
colnames(d) <- c("player", "ecr", "ecrwk", "fpts", "fptswk", "rank", "rankwk")
d <- d[complete.cases(d), ]
k <- read.csv("kick.csv", header = TRUE)
k <- k[ , order(names(k))]
View(k)
k <- data.frame(k[31], stack(k[1:15]), stack(k[16:30]), stack(k[32:46]))
colnames(k) <- c("player", "ecr", "ecrwk", "fpts", "fptswk", "rank", "rankwk")
k <- k[complete.cases(k), ]
View(k)
q <- read.csv("qb.csv", header = TRUE)
q <- q[ , order(names(q))]
q <- data.frame(q[35], stack(q[1:17]), stack(q[18:34]), stack(d[36:52]))
colnames(q) <- c("player", "ecr", "ecrwk", "fpts", "fptswk", "rank", "rankwk")
q <- read.csv("qb.csv", header = TRUE)
q <- read.csv("qb.csv", header = TRUE)
r <- read.csv("rb.csv", header = TRUE)
t <- read.csv("te.csv", header = TRUE)
w <- read.csv("wr.csv", header = TRUE)
d <- read.csv("defense.csv", header = TRUE)
d <- d[ , order(names(d))]
d <- data.frame(d[35], stack(d[1:17]), stack(d[18:34]), stack(d[36:52]))
colnames(d) <- c("player", "ecr", "ecrwk", "fpts", "fptswk", "rank", "rankwk")
d <- d[complete.cases(d), ]
k <- read.csv("kick.csv", header = TRUE)
k <- k[ , order(names(k))]
k <- data.frame(k[31], stack(k[1:15]), stack(k[16:30]), stack(k[32:46]))
colnames(k) <- c("player", "ecr", "ecrwk", "fpts", "fptswk", "rank", "rankwk")
k <- k[complete.cases(k), ]
q <- read.csv("qb.csv", header = TRUE)
q <- q[ , order(names(q))]
q <- data.frame(q[35], stack(q[1:17]), stack(q[18:34]), stack(q[36:52]))
colnames(q) <- c("player", "ecr", "ecrwk", "fpts", "fptswk", "rank", "rankwk")
q <- q[complete.cases(q), ]
r <- read.csv("rb.csv", header = TRUE)
r <- r[ , order(names(r))]
r <- data.frame(r[35], stack(r[1:17]), stack(r[18:34]), stack(r[36:52]))
colnames(r) <- c("player", "ecr", "ecrwk", "fpts", "fptswk", "rank", "rankwk")
r <- r[complete.cases(r), ]
t <- read.csv("te.csv", header = TRUE)
t <- t[ , order(names(t))]
t <- data.frame(t[35], stack(t[1:17]), stack(t[18:34]), stack(t[36:52]))
colnames(t) <- c("player", "ecr", "ecrwk", "fpts", "fptswk", "rank", "rankwk")
t <- t[complete.cases(t), ]
w <- read.csv("wr.csv", header = TRUE)
w <- w[ , order(names(w))]
w <- data.frame(w[35], stack(w[1:17]), stack(w[18:34]), stack(w[36:52]))
colnames(w) <- c("player", "ecr", "ecrwk", "fpts", "fptswk", "rank", "rankwk")
w <- w[complete.cases(w), ]
write.csv(d, "d.csv", row.names = FALSE)
write.csv(k, "k.csv", row.names = FALSE)
write.csv(q, "q.csv", row.names = FALSE)
write.csv(r, "r.csv", row.names = FALSE)
write.csv(t, "t.csv", row.names = FALSE)
write.csv(w, "w.csv", row.names = FALSE)
getwd()
